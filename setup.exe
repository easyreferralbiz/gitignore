import tkinter as tk
from tkinter import ttk, messagebox
import subprocess
import sys
import os
import json
import sqlite3
import threading
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)

class GeminiSetupGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Gemini Trading Bot Setup")
        self.root.geometry("600x400")
        self.root.iconbitmap("gemini_icon.ico")  # Set the window icon

        # Create main notebook for tabs
        self.notebook = ttk.Notebook(root)
        self.notebook.pack(expand=True, fill='both', padx=10, pady=5)

        # Create tabs
        self.setup_tab = ttk.Frame(self.notebook)
        self.config_tab = ttk.Frame(self.notebook)
        self.status_tab = ttk.Frame(self.notebook)

        self.notebook.add(self.setup_tab, text="Setup")
        self.notebook.add(self.config_tab, text="Configuration")
        self.notebook.add(self.status_tab, text="Status")

        self.create_setup_tab()
        self.create_config_tab()
        self.create_status_tab()

        # Initialize progress bar
        self.progress = ttk.Progressbar(root, mode='determinate')
        self.progress.pack(fill='x', padx=10, pady=5)

    def create_setup_tab(self):
        # Dependencies frame
        deps_frame = ttk.LabelFrame(self.setup_tab, text="Dependencies")
        deps_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(deps_frame, text="Required Python packages:").pack(pady=5)
        self.deps_text = tk.Text(deps_frame, height=4, width=40)
        self.deps_text.insert('1.0', "requests\npillow\npython-dateutil")
        self.deps_text.config(state='disabled')
        self.deps_text.pack(pady=5)

        ttk.Button(deps_frame, text="Install Dependencies",
                   command=self.install_dependencies).pack(pady=5)

        # Database frame
        db_frame = ttk.LabelFrame(self.setup_tab, text="Database")
        db_frame.pack(fill='x', padx=5, pady=5)

        ttk.Button(db_frame, text="Initialize Database",
                   command=self.init_database).pack(pady=5)

    def create_config_tab(self):
        # API Configuration
        api_frame = ttk.LabelFrame(self.config_tab, text="API Configuration")
        api_frame.pack(fill='x', padx=5, pady=5)

        ttk.Label(api_frame, text="API Key:").pack()
        self.api_key_var = tk.StringVar()
        self.api_key_entry = ttk.Entry(api_frame, textvariable=self.api_key_var)
        self.api_key_entry.pack(pady=5)

        ttk.Label(api_frame, text="API Secret:").pack()
        self.api_secret_var = tk.StringVar()
        self.api_secret_entry = ttk.Entry(api_frame, textvariable=self.api_secret_var)
        self.api_secret_entry.pack(pady=5)

        ttk.Button(api_frame, text="Save Configuration",
                   command=self.save_config).pack(pady=5)

    def create_status_tab(self):
        status_frame = ttk.LabelFrame(self.status_tab, text="Installation Status")
        status_frame.pack(fill='both', expand=True, padx=5, pady=5)

        self.status_text = tk.Text(status_frame, height=10, width=50)
        self.status_text.pack(pady=5)

        ttk.Button(status_frame, text="Check Status",
                   command=self.check_status).pack(pady=5)

    def install_dependencies(self):
        def install():
            try:
                subprocess.check_call([sys.executable, "-m", "pip", "install",
                                       "requests", "pillow", "python-dateutil"])
                self.update_status("Dependencies installed successfully")
            except Exception as e:
                self.update_status(f"Error installing dependencies: {str(e)}")

        thread = threading.Thread(target=install)
        thread.start()

    def init_database(self):
        try:
            import database_setup
            database_setup.setup_database()
            self.update_status("Database initialized successfully")
        except Exception as e:
            self.update_status(f"Error initializing database: {str(e)}")

    def save_config(self):
        config = {
            "api_key": self.api_key_var.get(),
            "api_secret": self.api_secret_var.get()
        }

        try:
            with open('config.json', 'w') as f:
                json.dump(config, f, indent=4)
            self.update_status("Configuration saved successfully")
        except Exception as e:
            self.update_status(f"Error saving configuration: {str(e)}")

    def check_status(self):
        status = []

        # Check Python version
        status.append(f"Python Version: {sys.version.split()[0]}")

        # Check dependencies
        try:
            import requests
            import PIL
            from dateutil import parser
            status.append("Dependencies: Installed")
        except ImportError as e:
            status.append(f"Dependencies: Missing ({str(e)})")

        # Check database
        try:
            conn = sqlite3.connect('trading_bot.db')
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            conn.close()
            status.append(f"Database tables: {len(tables)}")
        except Exception as e:
            status.append(f"Database error: {str(e)}")

        # Check config file
        if os.path.exists('config.json'):
            status.append("Config file: Present")
        else:
            status.append("Config file: Missing")

        self.status_text.delete('1.0', tk.END)
        self.status_text.insert('1.0', '\n'.join(status))

    def update_status(self, message):
        self.status_text.insert(tk.END, f"\n{message}")
        self.status_text.see(tk.END)

def main():
    root = tk.Tk()
    app = GeminiSetupGUI(root)
    root.mainloop()

if __name__ == "__main__":
    main()
